{"version":3,"file":"static/css/main.a27d2527.css","mappings":"iGACA,EAGE,sBACA,4BAFA,SCAa,CDIf,OALE,QAOA,CAFF,KACE,WACA,CAEF,wBACE,aAEF,KACE,wBACA,qBEdF,cAKE,mBAFA,mBAFA,WAGA,YAEA,0BAJA,WAIA,CAEA,gCAGE,mBAFA,aACA,4BACA,CAEE,2DACE,WAEF,8DACE,qBAKN,4BAGE,mBADA,aAEA,6BAHA,YAGA,CACA,kCACE,eCmkBF,wBDpkBA,kCAGI,gBAIF,gDACE,aACA,8BACA,YAEA,uDACE,mBCujBN,wBD/lBJ,cA8CI,aAIJ,oBAEE,mBACA,YACA,0BAHA,WAGA,CAGI,oEAME,mBALA,mBAEA,mBAIA,eAHA,aACA,6BAHA,eAKA,CACA,yEACE,mEAEF,0FACE,aACA,sBACA,sGACE,WAKR,sDAKE,mBACA,mBALA,aACA,6BAEA,iBADA,WAGA,CAGI,qFACE,YCwgBR,wBDlhBA,sDAiBI,iBADA,WACA,CAII,qFACE,YC4fV,wBDlhBA,sDA6BI,aCqfJ,wBDlhBA,sDAiCI,iBADA,WACA,ECifJ,wBD7iBJ,oBAkEI,aC2eA,wBD7iBJ,oBAqEI,aCweA,wBD7iBJ,oBAwEI,aE1HJ,WACE,4EAEA,CAEA,2BAEA,CAJA,uBACA,4BACA,CAFA,sBAIA,0CAIE,kBAEA,CAJA,yCAEA,CAEA,+CAGE,cD+kBF,eCjlBE,2BAEA,CAEA,eAGA,eD0kBF,CC5kBE,kDACA,mBACA,CAJA,yBACA,iDACA,kBANF,yDAcE,+EDokBF,WCpkBE,wFDokBF,YCpkBE,wFAaN,iDAEI,8EAGA,wBAGA,6BAHA,qBAGA,KACA,2EAEA,CAGA,mDACA,CAJA,qBAIA,KACA,4EAIA,wBACA,4BACA,CAFA,qBAEA,KACA,4EAGA,CACA,uBACA,4BACA,CAHA,qBAGA,KAEF,4EAEE,CACA,uBACA,4BAnCJ,CAiCI,qBAjCJ,iFAGI,CACA,uBACA,4BAGA,CALA,qBAKA,4GAGA,CAGA,mDACA,CAJA,qBAIA,KACA,2EAIA,wBACA,4BACA,CAFA,qBAEA,iFAIA,CACA,uBACA,4BACA,CAHA,qBAGA,iFAIA,CACA,uBACA,6BAFA,qBAEA,wTC3EJ,QAEE,sGADA,YACA,CACA,cAME,aJNa,CIKb,2BJPW,CISX,eACA,gBALA,SAQA,iBAVA,kBASA,kBADA,0BAPA,QAEA,2DAOA,CFilBA,wBE7kBA,cACE,eACA,iBF2kBF,wBEtkBA,cACE,eACA,gBACA,aFmkBF,wBE9jBA,cACE,eACA,gBACA,aF2jBF,wBEtjBA,cACE,eACA,gBAEA,kBADA,WACA,EAIJ,qBAKE,SAFA,iBADA,eADA,kBAGA,QAEA,4DACA,YFuiBA,wBE9iBF,qBAUI,aFoiBF,wBE9iBF,qBAcI,aFgiBF,wBE9iBF,qBAkBI,aAKN,oCACE,GACE,+EAEA,CACA,uBAEF,4BACE,CAJA,qBAIA,oFAGA,CAEF,uBACE,4BACA,CAJA,qBAIA,kFAKA,wBACA,4BACA,CAFA,qBAEA,kFAIA,CACA,uBACA,4BACA,CAHA,qBAGA,gFAIA,CACA,uBACA,4BAnCJ,CAiCI,qBAjCJ,+EAGI,CACA,uBACA,4BAEF,CAJE,qBAIF,8BACE,kFAGA,CAGA,mDACA,CAJA,qBAIA,oFAKA,wBACA,4BACA,CAFA,qBAEA,kFAIA,CACA,uBACA,4BACA,CAHA,qBAGA,kFAIA,CACA,uBACA,6BAFA,qBAEA","sources":["index.scss","styles/variables.scss","components/currentWeatherComponent.scss","breakpoint/breakpoint.scss","pages/detailsPage.scss","components/homePage.scss"],"sourcesContent":["@import \"./styles/variables.scss\";\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n  font-family: $primary-font;\n}\nbody {\n  height: 100%;\n  margin: 0;\n}\nbody::-webkit-scrollbar {\n  display: none;\n}\nbody {\n  -ms-overflow-style: none; /* IE and Edge */\n  scrollbar-width: none; /* Firefox */\n}\n","@import url(\"https://fonts.googleapis.com/css2?family=Lato:wght@100;300;400;700;900&display=swap\");\r\n@import \"../breakpoint/breakpoint.scss\";\r\n\r\n$primary-font: \"Lato\", sans-serif;\r\n$primary-color: #a3a3a3;\r\n$primary-color1: #e7e7e7;\r\n$primary-color2: #aaaaaa;\r\n$primary-color3: #757575;\r\n","@import \"../styles/variables.scss\";\r\n\r\n.cw-container {\r\n  color: #ffff;\r\n  width: 25rem;\r\n  border-radius: 10px;\r\n  margin: auto;\r\n  background: rgb(66, 122, 147);\r\n  text-transform: capitalize;\r\n\r\n  .header-container {\r\n    display: flex;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n    .weathericon-container {\r\n      img {\r\n        width: 80px;\r\n      }\r\n      .cloud {\r\n        padding-bottom: -10px;\r\n      }\r\n    }\r\n  }\r\n\r\n  .weather-data {\r\n    margin-top: 0;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-around;\r\n    .temp {\r\n      font-size: 60px;\r\n      @include media(\"<415px\") {\r\n        font-size: 50px;\r\n      }\r\n    }\r\n    .details {\r\n      .parameter {\r\n        display: flex;\r\n        justify-content: space-between;\r\n        padding: 4px;\r\n\r\n        .label {\r\n          padding-right: 30px;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  @include media(\"<415px\") {\r\n    width: 22rem;\r\n  }\r\n}\r\n\r\n.forecast-container {\r\n  width: 40rem;\r\n  border-radius: 10px;\r\n  margin: auto;\r\n  text-transform: capitalize;\r\n  .forecast-item {\r\n    .forecast-header {\r\n      .item-container {\r\n        background: lightblue;\r\n        margin-top: 15px;\r\n        border-radius: 15px;\r\n        display: flex;\r\n        justify-content: space-around;\r\n        align-items: center;\r\n        cursor: pointer;\r\n        span {\r\n          width: fit-content;\r\n        }\r\n        .small-icon-container {\r\n          display: flex;\r\n          flex-direction: column;\r\n          .small-icon {\r\n            width: 70px;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    .content-container {\r\n      display: flex;\r\n      justify-content: space-around;\r\n      width: 500px;\r\n      margin-left: 65px;\r\n      background: rgb(81, 120, 142);\r\n      border-radius: 15px;\r\n      .content-section {\r\n        .content {\r\n          span {\r\n            margin: 16px;\r\n          }\r\n        }\r\n      }\r\n\r\n      @include media(\"<712px\") {\r\n        width: 400px;\r\n        margin-left: 40px;\r\n\r\n        .content-section {\r\n          .content {\r\n            span {\r\n              margin: 5px;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      @include media(\"<510px\") {\r\n        width: 300px;\r\n      }\r\n      @include media(\"<415px\") {\r\n        width: 21rem;\r\n        margin-left: -6px;\r\n      }\r\n    }\r\n  }\r\n\r\n  @include media(\"<712px\") {\r\n    width: 30rem;\r\n  }\r\n  @include media(\"<510px\") {\r\n    width: 25rem;\r\n  }\r\n  @include media(\"<415px\") {\r\n    width: 20rem;\r\n  }\r\n}\r\n","//     _            _           _                           _ _\r\n//    (_)          | |         | |                         | (_)\r\n//     _ _ __   ___| |_   _  __| | ___   _ __ ___   ___  __| |_  __ _\r\n//    | | '_ \\ / __| | | | |/ _` |/ _ \\ | '_ ` _ \\ / _ \\/ _` | |/ _` |\r\n//    | | | | | (__| | |_| | (_| |  __/ | | | | | |  __/ (_| | | (_| |\r\n//    |_|_| |_|\\___|_|\\__,_|\\__,_|\\___| |_| |_| |_|\\___|\\__,_|_|\\__,_|\r\n//\r\n//      Simple, elegant and maintainable media queries in Sass\r\n//                        v2.0.0\r\n//\r\n//        https://eduardoboucas.github.io/include-media\r\n//\r\n//         Authors: Eduardo Boucas (@eduardoboucas)\r\n//                  Kitty Giraudel (@kittygiraudel)\r\n//\r\n//      This project is licensed under the terms of the MIT license\r\n@charset \"UTF-8\";\r\n\r\n////\r\n/// include-media library public configuration\r\n/// @author Eduardo Boucas\r\n/// @access public\r\n////\r\n@use 'sass:math';\r\n@use 'sass:map';\r\n@use 'sass:list';\r\n@use 'sass:string';\r\n@use 'sass:meta';\r\n\r\n///\r\n/// Creates a list of global breakpoints\r\n///\r\n/// @example scss - Creates a single breakpoint with the label `phone`\r\n///  $breakpoints: ('phone': 320px);\r\n///\r\n$breakpoints: (\r\n  'phone': 320px,\r\n  'tablet': 768px,\r\n  'desktop': 1024px,\r\n) !default;\r\n\r\n///\r\n/// Creates a list of static expressions or media types\r\n///\r\n/// @example scss - Creates a single media type (screen)\r\n///  $media-expressions: ('screen': 'screen');\r\n///\r\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\r\n///  $media-expressions: (\r\n///    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)'\r\n///  );\r\n///\r\n$media-expressions: (\r\n  'screen': 'screen',\r\n  'print': 'print',\r\n  'handheld': 'handheld',\r\n  'landscape': '(orientation: landscape)',\r\n  'portrait': '(orientation: portrait)',\r\n  'retina2x':\r\n    '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)',\r\n  'retina3x':\r\n    '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)',\r\n) !default;\r\n\r\n///\r\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\r\n///\r\n/// @example scss - Interval for pixels is defined as `1` by default\r\n///  @include media('>128px') {}\r\n///\r\n///  /* Generates: */\r\n///  @media (min-width: 129px) {}\r\n///\r\n/// @example scss - Interval for ems is defined as `0.01` by default\r\n///  @include media('>20em') {}\r\n///\r\n///  /* Generates: */\r\n///  @media (min-width: 20.01em) {}\r\n///\r\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\r\n///  @include media('>2.0rem') {}\r\n///\r\n///  /* Generates: */\r\n///  @media (min-width: 2.1rem) {}\r\n///\r\n$unit-intervals: (\r\n  'px': 1,\r\n  'em': 0.01,\r\n  'rem': 0.1,\r\n  '': 0,\r\n) !default;\r\n\r\n///\r\n/// Defines whether support for media queries is available, useful for creating separate stylesheets\r\n/// for browsers that don't support media queries.\r\n///\r\n/// @example scss - Disables support for media queries\r\n///  $im-media-support: false;\r\n///  @include media('>=tablet') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* Generates: */\r\n///  .foo {\r\n///    color: tomato;\r\n///  }\r\n///\r\n$im-media-support: true !default;\r\n\r\n///\r\n/// Selects which breakpoint to emulate when support for media queries is disabled. Media queries that start at or\r\n/// intercept the breakpoint will be displayed, any others will be ignored.\r\n///\r\n/// @example scss - This media query will show because it intercepts the static breakpoint\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'desktop';\r\n///  @include media('>=tablet') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* Generates: */\r\n///  .foo {\r\n///    color: tomato;\r\n///  }\r\n///\r\n/// @example scss - This media query will NOT show because it does not intercept the desktop breakpoint\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'tablet';\r\n///  @include media('>=desktop') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* No output */\r\n///\r\n$im-no-media-breakpoint: 'desktop' !default;\r\n\r\n///\r\n/// Selects which media expressions are allowed in an expression for it to be used when media queries\r\n/// are not supported.\r\n///\r\n/// @example scss - This media query will show because it intercepts the static breakpoint and contains only accepted media expressions\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'desktop';\r\n///  $im-no-media-expressions: ('screen');\r\n///  @include media('>=tablet', 'screen') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///   /* Generates: */\r\n///   .foo {\r\n///     color: tomato;\r\n///   }\r\n///\r\n/// @example scss - This media query will NOT show because it intercepts the static breakpoint but contains a media expression that is not accepted\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'desktop';\r\n///  $im-no-media-expressions: ('screen');\r\n///  @include media('>=tablet', 'retina2x') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* No output */\r\n///\r\n$im-no-media-expressions: ('screen', 'portrait', 'landscape') !default;\r\n\r\n////\r\n/// Cross-engine logging engine\r\n/// @author Kitty Giraudel\r\n/// @access private\r\n////\r\n\r\n///\r\n/// Log a message either with `@error` if supported\r\n/// else with `@warn`, using `feature-exists('at-error')`\r\n/// to detect support.\r\n///\r\n/// @param {String} $message - Message to log\r\n///\r\n@function im-log($message) {\r\n  @if meta.feature-exists('at-error') {\r\n    @error $message;\r\n  } @else {\r\n    @warn $message;\r\n    $_: noop();\r\n  }\r\n\r\n  @return $message;\r\n}\r\n\r\n///\r\n/// Wrapper mixin for the log function so it can be used with a more friendly\r\n/// API than `@if im-log('..') {}` or `$_: im-log('..')`. Basically, use the function\r\n/// within functions because it is not possible to include a mixin in a function\r\n/// and use the mixin everywhere else because it's much more elegant.\r\n///\r\n/// @param {String} $message - Message to log\r\n///\r\n@mixin log($message) {\r\n  @if im-log($message) {\r\n  }\r\n}\r\n\r\n///\r\n/// Function with no `@return` called next to `@warn` in Sass 3.3\r\n/// to trigger a compiling error and stop the process.\r\n///\r\n@function noop() {\r\n}\r\n\r\n///\r\n/// Determines whether a list of conditions is intercepted by the static breakpoint.\r\n///\r\n/// @param {Arglist}   $conditions  - Media query conditions\r\n///\r\n/// @return {Boolean} - Returns true if the conditions are intercepted by the static breakpoint\r\n///\r\n@function im-intercepts-static-breakpoint($conditions...) {\r\n  $no-media-breakpoint-value: map.get($breakpoints, $im-no-media-breakpoint);\r\n\r\n  @if not $no-media-breakpoint-value {\r\n    @if im-log('`#{$im-no-media-breakpoint}` is not a valid breakpoint.') {\r\n    }\r\n  }\r\n\r\n  @each $condition in $conditions {\r\n    @if not map.has-key($media-expressions, $condition) {\r\n      $operator: get-expression-operator($condition);\r\n      $prefix: get-expression-prefix($operator);\r\n      $value: get-expression-value($condition, $operator);\r\n\r\n      @if ($prefix == 'max' and $value <= $no-media-breakpoint-value) or\r\n        ($prefix == 'min' and $value > $no-media-breakpoint-value)\r\n      {\r\n        @return false;\r\n      }\r\n    } @else if not list.index($im-no-media-expressions, $condition) {\r\n      @return false;\r\n    }\r\n  }\r\n\r\n  @return true;\r\n}\r\n\r\n////\r\n/// Parsing engine\r\n/// @author Kitty Giraudel\r\n/// @access private\r\n////\r\n\r\n///\r\n/// Get operator of an expression\r\n///\r\n/// @param {String} $expression - Expression to extract operator from\r\n///\r\n/// @return {String} - Any of `>=`, `>`, `<=`, `<`, `≥`, `≤`\r\n///\r\n@function get-expression-operator($expression) {\r\n  @each $operator in ('>=', '>', '<=', '<', '≥', '≤') {\r\n    @if string.index($expression, $operator) {\r\n      @return $operator;\r\n    }\r\n  }\r\n\r\n  // It is not possible to include a mixin inside a function, so we have to\r\n  // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\r\n  // functions cannot be called anywhere in Sass, we need to hack the call in\r\n  // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\r\n  // Sass 3.3, change this line in `@if im-log(..) {}` instead.\r\n  $_: im-log('No operator found in `#{$expression}`.');\r\n}\r\n\r\n///\r\n/// Get dimension of an expression, based on a found operator\r\n///\r\n/// @param {String} $expression - Expression to extract dimension from\r\n/// @param {String} $operator - Operator from `$expression`\r\n///\r\n/// @return {String} - `width` or `height` (or potentially anything else)\r\n///\r\n@function get-expression-dimension($expression, $operator) {\r\n  $operator-index: string.index($expression, $operator);\r\n  $parsed-dimension: string.slice($expression, 0, $operator-index - 1);\r\n  $parsed-dimension: str-trim($parsed-dimension);\r\n  $dimension: 'width';\r\n\r\n  @if string.length($parsed-dimension) > 0 {\r\n    $dimension: $parsed-dimension;\r\n  }\r\n\r\n  @return $dimension;\r\n}\r\n\r\n///\r\n/// Get dimension prefix based on an operator\r\n///\r\n/// @param {String} $operator - Operator\r\n///\r\n/// @return {String} - `min` or `max`\r\n///\r\n@function get-expression-prefix($operator) {\r\n  @return if(list.index(('<', '<=', '≤'), $operator), 'max', 'min');\r\n}\r\n\r\n///\r\n/// Get value of an expression, based on a found operator\r\n///\r\n/// @param {String} $expression - Expression to extract value from\r\n/// @param {String} $operator - Operator from `$expression`\r\n///\r\n/// @return {Number} - A numeric value\r\n///\r\n@function get-expression-value($expression, $operator) {\r\n  $operator-index: string.index($expression, $operator);\r\n  $value: string.slice($expression, $operator-index + string.length($operator));\r\n  $trimmedValue: str-trim($value);\r\n\r\n  @if map.has-key($breakpoints, $trimmedValue) {\r\n    $value: map.get($breakpoints, $trimmedValue);\r\n  } @else {\r\n    $value: to-number($trimmedValue);\r\n  }\r\n\r\n  $interval: map.get($unit-intervals, math.unit($value));\r\n\r\n  @if not $interval {\r\n    // It is not possible to include a mixin inside a function, so we have to\r\n    // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\r\n    // functions cannot be called anywhere in Sass, we need to hack the call in\r\n    // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\r\n    // Sass 3.3, change this line in `@if im-log(..) {}` instead.\r\n    $_: im-log('Unknown unit `#{math.unit($value)}`.');\r\n  }\r\n\r\n  @if $operator == '>' {\r\n    $value: $value + $interval;\r\n  } @else if $operator == '<' {\r\n    $value: $value - $interval;\r\n  }\r\n\r\n  @return $value;\r\n}\r\n\r\n///\r\n/// Parse an expression to return a valid media-query expression\r\n///\r\n/// @param {String} $expression - Expression to parse\r\n///\r\n/// @return {String} - Valid media query\r\n///\r\n@function parse-expression($expression) {\r\n  // If it is part of $media-expressions, it has no operator\r\n  // then there is no need to go any further, just return the value\r\n  @if map.has-key($media-expressions, $expression) {\r\n    @return map.get($media-expressions, $expression);\r\n  }\r\n\r\n  $operator: get-expression-operator($expression);\r\n  $dimension: get-expression-dimension($expression, $operator);\r\n  $prefix: get-expression-prefix($operator);\r\n  $value: get-expression-value($expression, $operator);\r\n\r\n  @return '(#{$prefix}-#{$dimension}: #{$value})';\r\n}\r\n\r\n///\r\n/// Slice `$list` between `$start` and `$end` indexes\r\n///\r\n/// @access private\r\n///\r\n/// @param {List} $list - List to slice\r\n/// @param {Number} $start [1] - Start index\r\n/// @param {Number} $end [length($list)] - End index\r\n///\r\n/// @return {List} Sliced list\r\n///\r\n@function slice($list, $start: 1, $end: list.length($list)) {\r\n  @if list.length($list) < 1 or $start > $end {\r\n    @return ();\r\n  }\r\n\r\n  $result: ();\r\n\r\n  @for $i from $start through $end {\r\n    $result: list.append($result, list.nth($list, $i), comma);\r\n  }\r\n\r\n  @return $result;\r\n}\r\n\r\n////\r\n/// String to number converter\r\n/// @author Kitty Giraudel\r\n/// @access private\r\n////\r\n\r\n///\r\n/// Casts a string into a number\r\n///\r\n/// @param {String | Number} $value - Value to be parsed\r\n///\r\n/// @return {Number}\r\n///\r\n\r\n@function to-number($value) {\r\n  @if meta.type-of($value) == 'number' {\r\n    @return $value;\r\n  } @else if meta.type-of($value) != 'string' {\r\n    $_: im-log('Value for `to-number` should be a number or a string.');\r\n  }\r\n\r\n  $first-character: string.slice($value, 1, 1);\r\n  $result: 0;\r\n  $digits: 0;\r\n  $minus: ($first-character == '-');\r\n  $numbers: (\r\n    '0': 0,\r\n    '1': 1,\r\n    '2': 2,\r\n    '3': 3,\r\n    '4': 4,\r\n    '5': 5,\r\n    '6': 6,\r\n    '7': 7,\r\n    '8': 8,\r\n    '9': 9,\r\n  );\r\n\r\n  // Remove +/- sign if present at first character\r\n  @if ($first-character == '+' or $first-character == '-') {\r\n    $value: string.slice($value, 2);\r\n  }\r\n\r\n  @for $i from 1 through string.length($value) {\r\n    $character: string.slice($value, $i, $i);\r\n\r\n    @if not(list.index(map.keys($numbers), $character) or $character == '.') {\r\n      @return to-length(if($minus, -$result, $result), string.slice($value, $i));\r\n    }\r\n\r\n    @if $character == '.' {\r\n      $digits: 1;\r\n    } @else if $digits == 0 {\r\n      $result: $result * 10 + map.get($numbers, $character);\r\n    } @else {\r\n      $digits: $digits * 10;\r\n      $result: $result + math.div(map.get($numbers, $character), $digits);\r\n    }\r\n  }\r\n\r\n  @return if($minus, -$result, $result);\r\n}\r\n\r\n///\r\n/// Add `$unit` to `$value`\r\n///\r\n/// @param {Number} $value - Value to add unit to\r\n/// @param {String} $unit - String representation of the unit\r\n///\r\n/// @return {Number} - `$value` expressed in `$unit`\r\n///\r\n@function to-length($value, $unit) {\r\n  $units: (\r\n    'px': 1px,\r\n    'cm': 1cm,\r\n    'mm': 1mm,\r\n    '%': 1%,\r\n    'ch': 1ch,\r\n    'pc': 1pc,\r\n    'in': 1in,\r\n    'em': 1em,\r\n    'rem': 1rem,\r\n    'pt': 1pt,\r\n    'ex': 1ex,\r\n    'vw': 1vw,\r\n    'vh': 1vh,\r\n    'vmin': 1vmin,\r\n    'vmax': 1vmax,\r\n  );\r\n\r\n  @if not list.index(map.keys($units), $unit) {\r\n    $_: im-log('Invalid unit `#{$unit}`.');\r\n  }\r\n\r\n  @return $value * map.get($units, $unit);\r\n}\r\n\r\n////\r\n/// String to number converter\r\n/// @author Jack McNicol\r\n/// @access private\r\n////\r\n\r\n///\r\n/// Trims a string of leading and trailing spaces\r\n///\r\n/// @param {String} $string - Value to be trimmed\r\n///\r\n/// @return {String}\r\n///\r\n\r\n@function str-trim($string) {\r\n  @if (str-slice($string, 1, 1) == ' ') {\r\n    @return str-trim(str-slice($string, 2));\r\n  } @else if (str-slice($string, str-length($string), -1) == ' ') {\r\n    @return str-trim(str-slice($string, 1, -2));\r\n  } @else {\r\n    @return $string;\r\n  }\r\n}\r\n\r\n///\r\n/// This mixin aims at redefining the configuration just for the scope of\r\n/// the call. It is helpful when having a component needing an extended\r\n/// configuration such as custom breakpoints (referred to as tweakpoints)\r\n/// for instance.\r\n///\r\n/// @author Kitty Giraudel\r\n///\r\n/// @param {Map} $tweakpoints [()] - Map of tweakpoints to be merged with `$breakpoints`\r\n/// @param {Map} $tweak-media-expressions [()] - Map of tweaked media expressions to be merged with `$media-expression`\r\n///\r\n/// @example scss - Extend the global breakpoints with a tweakpoint\r\n///  @include media-context(('custom': 678px)) {\r\n///    .foo {\r\n///      @include media('>phone', '<=custom') {\r\n///       // ...\r\n///      }\r\n///    }\r\n///  }\r\n///\r\n/// @example scss - Extend the global media expressions with a custom one\r\n///  @include media-context($tweak-media-expressions: ('all': 'all')) {\r\n///    .foo {\r\n///      @include media('all', '>phone') {\r\n///       // ...\r\n///      }\r\n///    }\r\n///  }\r\n///\r\n/// @example scss - Extend both configuration maps\r\n///  @include media-context(('custom': 678px), ('all': 'all')) {\r\n///    .foo {\r\n///      @include media('all', '>phone', '<=custom') {\r\n///       // ...\r\n///      }\r\n///    }\r\n///  }\r\n///\r\n@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {\r\n  // Save global configuration\r\n  $global-breakpoints: $breakpoints;\r\n  $global-media-expressions: $media-expressions;\r\n\r\n  // Update global configuration\r\n  $breakpoints: map.merge($breakpoints, $tweakpoints) !global;\r\n  $media-expressions: map.merge($media-expressions, $tweak-media-expressions) !global;\r\n\r\n  @content;\r\n\r\n  // Restore global configuration\r\n  $breakpoints: $global-breakpoints !global;\r\n  $media-expressions: $global-media-expressions !global;\r\n}\r\n\r\n////\r\n/// include-media public exposed API\r\n/// @author Eduardo Boucas\r\n/// @access public\r\n////\r\n\r\n///\r\n/// Generates a media query based on a list of conditions\r\n///\r\n/// @param {Arglist}   $conditions  - Media query conditions\r\n///\r\n/// @example scss - With a single set breakpoint\r\n///  @include media('>phone') { }\r\n///\r\n/// @example scss - With two set breakpoints\r\n///  @include media('>phone', '<=tablet') { }\r\n///\r\n/// @example scss - With custom values\r\n///  @include media('>=358px', '<850px') { }\r\n///\r\n/// @example scss - With set breakpoints with custom values\r\n///  @include media('>desktop', '<=1350px') { }\r\n///\r\n/// @example scss - With a static expression\r\n///  @include media('retina2x') { }\r\n///\r\n/// @example scss - Mixing everything\r\n///  @include media('>=350px', '<tablet', 'retina3x') { }\r\n///\r\n@mixin media($conditions...) {\r\n  @if ($im-media-support and list.length($conditions) == 0) or\r\n    (not $im-media-support and im-intercepts-static-breakpoint($conditions...))\r\n  {\r\n    @content;\r\n  } @else if ($im-media-support and list.length($conditions) > 0) {\r\n    @media #{string.unquote(parse-expression(list.nth($conditions, 1)))} {\r\n      // Recursive call\r\n      $sliced-conditions: slice($conditions, 2);\r\n      @include media($sliced-conditions...) {\r\n        @content;\r\n      }\r\n    }\r\n  }\r\n}","@import \"../styles/variables.scss\";\r\n\r\n.container {\r\n  background: url(../images/bck2.jpeg);\r\n  background-size: cover;\r\n  background-position: center;\r\n  background-repeat: no-repeat;\r\n  background-attachment: fixed;\r\n  height: 80rem;\r\n  .container-header {\r\n    display: flex;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n    padding: 50px 0;\r\n\r\n    h2 {\r\n      font-family: $primary-font;\r\n      color: aliceblue;\r\n      text-transform: capitalize;\r\n      font-size: 25px;\r\n      width: fit-content;\r\n      height: fit-content;\r\n      font-weight: 400;\r\n      cursor: pointer;\r\n      @include media(\"<510px\") {\r\n        font-size: 20px;\r\n      }\r\n    }\r\n    .search-container {\r\n      .search-details {\r\n        width: 400px;\r\n        @include media(\"<510px\") {\r\n          width: 300px;\r\n        }\r\n        @include media(\"<415px\") {\r\n          width: 18rem;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n@keyframes backgroundEffect {\r\n  0% {\r\n    background: url(../images/rain.jpg);\r\n    background-size: cover;\r\n    background-position: center;\r\n    background-repeat: no-repeat;\r\n  }\r\n  20% {\r\n    background: url(../images/rain.jpg);\r\n    background-size: cover;\r\n    background-position: center;\r\n    background-repeat: no-repeat;\r\n  }\r\n  40% {\r\n    background: url(../images/bck4.jpeg);\r\n    background-size: cover;\r\n    background-position: center;\r\n    background-repeat: no-repeat;\r\n  }\r\n  60% {\r\n    background: url(../images/bck4.jpeg);\r\n    background-size: cover;\r\n    background-position: center;\r\n    background-repeat: no-repeat;\r\n  }\r\n  80% {\r\n    background: url(../images/bck5.jpeg);\r\n    background-size: cover;\r\n    background-position: center;\r\n    background-repeat: no-repeat;\r\n  }\r\n  100% {\r\n    background: url(../images/clouds.jpg);\r\n    background-size: cover;\r\n    background-position: center;\r\n    background-repeat: no-repeat;\r\n  }\r\n}\r\n","@import \"../styles/variables.scss\";\r\n\r\n.header {\r\n  height: 80rem;\r\n  animation: backgroundChange infinite linear 10s;\r\n  .text {\r\n    position: absolute;\r\n    top: 10%;\r\n    left: 50%;\r\n    transform: translate(-50%);\r\n    font-family: $primary-font;\r\n    color: $primary-color1;\r\n    font-size: 50px;\r\n    font-weight: 800;\r\n    text-transform: capitalize;\r\n    text-align: center;\r\n    padding-top: 90px;\r\n  }\r\n\r\n  @include media(\"<990px\") {\r\n    .text {\r\n      font-size: 40px;\r\n      font-weight: 700;\r\n    }\r\n  }\r\n\r\n  @include media(\"<785px\") {\r\n    .text {\r\n      font-size: 40px;\r\n      font-weight: 700;\r\n      width: 500px;\r\n    }\r\n  }\r\n\r\n  @include media(\"<= 515px\") {\r\n    .text {\r\n      font-size: 40px;\r\n      font-weight: 700;\r\n      width: 25rem;\r\n    }\r\n  }\r\n\r\n  @include media(\"<= 410px\") {\r\n    .text {\r\n      font-size: 25px;\r\n      font-weight: 600;\r\n      width: 20rem;\r\n      padding-top: 120px;\r\n    }\r\n  }\r\n\r\n  .search-icon {\r\n    position: absolute;\r\n    padding: 20px 0;\r\n    margin: 50px auto;\r\n    top: 30%;\r\n    left: 50%;\r\n    transform: translate(-50%);\r\n    width: 500px;\r\n\r\n    @include media(\"<= 515px\") {\r\n      width: 400px;\r\n    }\r\n\r\n    @include media(\"<= 410px\") {\r\n      width: 350px;\r\n    }\r\n\r\n    @include media(\"< 410px\") {\r\n      width: 350px;\r\n    }\r\n  }\r\n}\r\n\r\n@keyframes backgroundChange {\r\n  0% {\r\n    background: url(../images/sunbeach.jpg);\r\n    background-size: cover;\r\n    background-position: center;\r\n    background-repeat: no-repeat;\r\n  }\r\n  20% {\r\n    background: url(../images/sunbeach.jpg);\r\n    background-size: cover;\r\n    background-position: center;\r\n    background-repeat: no-repeat;\r\n  }\r\n  40% {\r\n    background: url(../images/clouds.jpg);\r\n    background-size: cover;\r\n    background-position: center;\r\n    background-repeat: no-repeat;\r\n  }\r\n  60% {\r\n    background: url(../images/clouds.jpg);\r\n    background-size: cover;\r\n    background-position: center;\r\n    background-repeat: no-repeat;\r\n  }\r\n  80% {\r\n    background: url(../images/rain.jpg);\r\n    background-size: cover;\r\n    background-position: center;\r\n    background-repeat: no-repeat;\r\n  }\r\n  100% {\r\n    background: url(../images/rain.jpg);\r\n    background-size: cover;\r\n    background-position: center;\r\n    background-repeat: no-repeat;\r\n  }\r\n}\r\n"],"names":[],"sourceRoot":""}